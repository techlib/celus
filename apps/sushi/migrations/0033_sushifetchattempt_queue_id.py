# Generated by Django 2.2.15 on 2020-09-03 11:12

from django.db import migrations, models


def fill_missing_start_queue(apps, schema_editor):
    """ Fills missing queue_id """
    SushiFetchAttempt = apps.get_model('sushi', 'SushiFetchAttempt')

    # set queue_id for the first in the queues
    SushiFetchAttempt.objects.annotate(
        is_previous=models.Exists(
            SushiFetchAttempt.objects.filter(queue_previous=models.OuterRef('pk'))
        )
    ).filter(is_previous=True, queue_previous__isnull=True).update(queue_id=models.F('pk'))

    # iterate for seconds, third, ... attempts in the queues
    while True:
        count = SushiFetchAttempt.objects.filter(
            queue_previous__queue_id__isnull=False, queue_id__isnull=True,
        ).update(
            # Can't use F('queue_previous__queue_id') here
            # this is a subquery workaround
            queue_id=models.Subquery(
                SushiFetchAttempt.objects.filter(pk=models.OuterRef('queue_previous')).values(
                    'queue_id'
                )[:1]
            )
        )
        if count == 0:
            break


class Migration(migrations.Migration):

    dependencies = [
        ('sushi', '0032_unschedule_3030'),
    ]

    operations = [
        migrations.AddField(
            model_name='sushifetchattempt',
            name='queue_id',
            field=models.IntegerField(
                blank=True, help_text='Identifier for attempt queue', null=True,
            ),
        ),
        migrations.RunPython(fill_missing_start_queue, migrations.RunPython.noop),
    ]
